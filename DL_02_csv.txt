import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Embedding,Flatten
from tensorflow.keras.preprocessing.sequence import pad_sequences



df=pd.read_csv('/content/IMDB_Dataset.csv')





def preprocess(text):
    
    text_lower = text.lower()

    
    soup = BeautifulSoup(text_lower, 'html.parser')
    clean_text = soup.get_text()

    return clean_text






df['review'] = df['review'].apply(preprocess)


tokenizer = Tokenizer(num_words=10000)  
tokenizer.fit_on_texts(df['review'])


sequences = tokenizer.texts_to_sequences(df['review'])
padded_sequences = pad_sequences(sequences, maxlen=500)


df['review'] = list(padded_sequences)





df




df['sentiment'].value_counts()




import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(6, 4))
sns.countplot(x='sentiment', data=df, palette='Blues_d')
plt.title('Count of Positive and Negative Sentiments')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()




X = np.array(df['review'].tolist())
y=df['sentiment']
y = df['sentiment'].map({'positive': 0, 'negative': 1})



X


y



xtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=0.2,random_state=42)



model = Sequential([
    Embedding(input_dim=10000, output_dim=16,input_shape=(500,)),
    GlobalAveragePooling1D(),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()
     



HISTORY = model.fit(xtrain, ytrain, validation_split = 0.2, epochs = 15, verbose = 1, batch_size = 32)
     



loss, accuracy = model.evaluate(xtest, ytest, verbose=2)
print(f"Test loss: {loss}")
print(f"Test accuracy: {accuracy}")
     



pd.DataFrame(HISTORY.history).plot()
plt.xlabel('epochs')
plt.ylabel('accuracy')

