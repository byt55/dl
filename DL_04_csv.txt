import pandas as pd 
import numpy as np 
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt 


data = pd.read_csv("/content/GOOGLE Stock Data set.csv")


data = pd.read_csv("/content/GOOGLE Stock Data set.csv")


data_training = data[data['Date']<'2019-01-01'].copy()
data_training.shape


data_test = data[data['Date']>='2019-01-01'].copy()
data_test.shape


training_data = data_training.drop(['Date','Adj Close'],axis=1)
training_data.shape


scaler=MinMaxScaler()
training_data=scaler.fit_transform(training_data)
training_data.shape[0]


x_train=[]
y_train=[]
for i in range(60,training_data.shape[0]):
  x_train.append(training_data[i-60:i])
  y_train.append(training_data[i,0])
x_train=np.array(x_train)
y_train=np.array(y_train)



from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LSTM,Dropout
model=Sequential()



model.add(LSTM(50,activation='relu',return_sequences=True,input_shape=(x_train.shape[1],5)));
model.add(Dropout(0.2));

model.add(LSTM(60,activation='relu',return_sequences=True))
model.add(Dropout(0.3))

model.add(LSTM(80,activation='relu',return_sequences=True));
model.add(Dropout(0.4))

model.add(LSTM(120,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='mse')
model.summary()



history=model.fit(x_train,y_train,epochs=5,batch_size=32)



data_test.tail()



past_60_days=data_training.tail(60)
df=pd.concat([past_60_days,data_test],ignore_index=True)
df.shape



df = df.drop(['Date','Adj Close'],axis=1)
df.tail()



input = scaler.fit_transform(df)
x_test=[]
y_test=[]
for i in range(60,input.shape[0]):
  x_test.append(input[i-60:i])
  y_test.append(input[i,0])
x_test=np.array(x_test)
y_test=np.array(y_test)



y_pred=model.predict(x_test)
y_pred



scaler.scale_



scale=1/4.90032736e-04
scale



y_pred=y_pred*scale
y_test=y_test*scale



plt.figure(figsize=(12,6))
plt.plot(y_test,'b',label='Original Price')
plt.plot(y_pred,'r',label='Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()